AWSTemplateFormatVersion: '2010-09-09'
Description: Zookeeper ON-AWS

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Tags. The metadata that you apply to the resources.
        Parameters:
          - App
          - Owner

Parameters:
  App:
    Type: String

  Owner:
    Type: String

  AvailabilityZonesCount:
    Description: Number of availability zones to span.
    Default: 3
    Type: Number
    AllowedValues: [ 1, 3 ]

  TaskExecutionRole:
    Description: >
      The Amazon Resource Name (ARN) of the task execution role
      that grants the Amazon ECS container agent permission
      to make AWS API calls on your behalf.
    Type: String

  VPC:
    Description: Choose existing VPC
    Type: AWS::EC2::VPC::Id

  PrivateSubnets:
    Description: Choose which subnets this ECS cluster should be deployed to
    Type: List<AWS::EC2::Subnet::Id>

  Cluster:
    Type: String

  CloudMap:
    Type: String

  CloudWatchLogsGroup:
    Type: String

Conditions:
  SecondZone:
    Fn::Or:
      - Fn::Equals: [!Ref AvailabilityZonesCount, 2]
      - Fn::Equals: [!Ref AvailabilityZonesCount, 3]
  ThirdZone:
    Fn::Equals: [!Ref AvailabilityZonesCount, 3]

Resources:
  ServiceDiscoveryEntry1:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Description: '"zookeeper" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 30
        RoutingPolicy: MULTIVALUE
      Name: zk1
      NamespaceId: !Ref CloudMap

  ServiceDiscoveryEntry2:
    Type: AWS::ServiceDiscovery::Service
    Condition: SecondZone
    Properties:
      Description: '"zookeeper" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 30
        RoutingPolicy: MULTIVALUE
      Name: zk2
      NamespaceId: !Ref CloudMap

  ServiceDiscoveryEntry3:
    Type: AWS::ServiceDiscovery::Service
    Condition: ThirdZone
    Properties:
      Description: '"zookeeper" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 30
        RoutingPolicy: MULTIVALUE
      Name: zk3
      NamespaceId: !Ref CloudMap

  ################################################################################
  # Task Security
  ################################################################################
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Group for ECS Zookeeper Tasks
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2181
          ToPort: 2181
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: App
          Value: !Ref App
        - Key: Owner
          Value: !Ref Owner

  SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: all traffic inside security group
      GroupId: !Ref SecurityGroup
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !Ref SecurityGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Volumes:
        - Name: !Sub ${AWS::StackName}-zookeeper-conf
          DockerVolumeConfiguration:
            Autoprovision: true
            Scope: shared
            Driver: rexray/ebs
            DriverOpts:
              volumetype: gp2
              size: 10
        - Name: !Sub ${AWS::StackName}-zookeeper-data
          DockerVolumeConfiguration:
            Autoprovision: true
            Scope: shared
            Driver: rexray/ebs
            DriverOpts:
              volumetype: gp2
              size: 10
        - Name: !Sub ${AWS::StackName}-zookeeper-datalog
          DockerVolumeConfiguration:
            Autoprovision: true
            Scope: shared
            Driver: rexray/ebs
            DriverOpts:
              volumetype: gp2
              size: 10
        - Name: !Sub ${AWS::StackName}-zookeeper-logs
          DockerVolumeConfiguration:
            Autoprovision: true
            Scope: shared
            Driver: rexray/ebs
            DriverOpts:
              volumetype: gp2
              size: 10
      ContainerDefinitions:
        - Name: zookeeper
          Essential: true
          Image: zookeeper:3.6.2
          MountPoints:
            - ContainerPath: /conf
              SourceVolume: !Sub ${AWS::StackName}-zookeeper-conf
              ReadOnly: false
            - ContainerPath: /data
              SourceVolume: !Sub ${AWS::StackName}-zookeeper-data
              ReadOnly: false
            - ContainerPath: /datalog
              SourceVolume: !Sub ${AWS::StackName}-zookeeper-datalog
              ReadOnly: false
            - ContainerPath: /logs
              SourceVolume: !Sub ${AWS::StackName}-zookeeper-logs
              ReadOnly: false
          PortMappings:
            # client
            - ContainerPort: 2181
              HostPort: 2181
              Protocol: tcp
            # server
            - ContainerPort: 2888
              HostPort: 2888
              Protocol: tcp
            # leader-ellection
            - ContainerPort: 3888
              HostPort: 3888
              Protocol: tcp
          EntryPoint:
            - bash
            - -c
            - Fn::Sub:
              - |
                az=`cat $ECS_CONTAINER_METADATA_FILE | grep -oP '(?<="AvailabilityZone": ")[^"]*'`
                if [ ! -f "$ZOO_DATA_DIR/myid" ] && [ $az == ${az1} ]; then echo 1 > "$ZOO_DATA_DIR/myid"; fi
                if [ ! -f "$ZOO_DATA_DIR/myid" ] && [ $az == ${az2} ]; then echo 2 > "$ZOO_DATA_DIR/myid"; fi
                if [ ! -f "$ZOO_DATA_DIR/myid" ] && [ $az == ${az3} ]; then echo 3 > "$ZOO_DATA_DIR/myid"; fi
                if [ $az == ${az1} ]; then export ZOO_SERVERS="server.1=0.0.0.0:2888:3888;2181 server.2=zk2.${Cluster}:2888:3888;2181 server.3=zk3.${Cluster}:2888:3888;2181"; fi
                if [ $az == ${az2} ]; then export ZOO_SERVERS="server.1=zk1.${Cluster}:2888:3888;2181 server.2=0.0.0.0:2888:3888;2181 server.3=zk3.${Cluster}:2888:3888;2181"; fi
                if [ $az == ${az3} ]; then export ZOO_SERVERS="server.1=zk1.${Cluster}:2888:3888;2181 server.2=zk2.${Cluster}:2888:3888;2181 server.3=0.0.0.0:2888:3888;2181"; fi
                /docker-entrypoint.sh zkServer.sh start-foreground
              -
                az1: !Select [0, !GetAZs '']
                az2: !Select [1, !GetAZs '']
                az3: !Select [2, !GetAZs '']
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: on-aws
      Cpu: "256"
      ExecutionRoleArn: !Ref TaskExecutionRole
      Family: zookeeper
      Memory: "512"
      NetworkMode: awsvpc

  Service1:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Cluster
      DeploymentConfiguration:
        MinimumHealthyPercent: 0
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: EC2
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Select [ 0, !Ref PrivateSubnets ]
          SecurityGroups:
            - !Ref SecurityGroup
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      PlacementConstraints:
        - Type: memberOf
          Expression:
            Fn::Sub:
              - attribute:ecs.subnet-id == ${subnet}
              -
                subnet: !Select [ 0, !Ref PrivateSubnets ]
      TaskDefinition:
        Ref: TaskDefinition
      ServiceRegistries:
        - RegistryArn: !GetAtt ServiceDiscoveryEntry1.Arn
      Tags:
        - Key: App
          Value: !Ref App
        - Key: Owner
          Value: !Ref Owner

  Service2:
    Type: AWS::ECS::Service
    Condition: SecondZone
    Properties:
      Cluster: !Ref Cluster
      DeploymentConfiguration:
        MinimumHealthyPercent: 0
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: EC2
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Select [ 1, !Ref PrivateSubnets ]
          SecurityGroups:
            - !Ref SecurityGroup
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      PlacementConstraints:
        - Type: memberOf
          Expression:
            Fn::Sub:
              - attribute:ecs.subnet-id == ${subnet}
              -
                subnet: !Select [ 1, !Ref PrivateSubnets ]
      TaskDefinition:
        Ref: TaskDefinition
      ServiceRegistries:
        - RegistryArn: !GetAtt ServiceDiscoveryEntry2.Arn
      Tags:
        - Key: App
          Value: !Ref App
        - Key: Owner
          Value: !Ref Owner

  Service3:
    Type: AWS::ECS::Service
    Condition: ThirdZone
    Properties:
      Cluster: !Ref Cluster
      DeploymentConfiguration:
        MinimumHealthyPercent: 0
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: EC2
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Select [ 2, !Ref PrivateSubnets ]
          SecurityGroups:
            - !Ref SecurityGroup
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      PlacementConstraints:
        - Type: memberOf
          Expression:
            Fn::Sub:
              - attribute:ecs.subnet-id == ${subnet}
              -
                subnet: !Select [ 2, !Ref PrivateSubnets ]
      TaskDefinition:
        Ref: TaskDefinition
      ServiceRegistries:
        - RegistryArn: !GetAtt ServiceDiscoveryEntry3.Arn
      Tags:
        - Key: App
          Value: !Ref App
        - Key: Owner
          Value: !Ref Owner
